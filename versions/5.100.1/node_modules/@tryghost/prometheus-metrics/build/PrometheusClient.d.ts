import { Request, Response } from 'express';
import client from 'prom-client';
type PrometheusClientConfig = {
    register?: client.Registry;
    pushgateway?: {
        enabled: boolean;
        url?: string;
        interval?: number;
        jobName?: string;
    };
};
/**
 * A client for exporting metrics to Prometheus, based on prom-client
 */
export declare class PrometheusClient {
    /**
     * Creates a new PrometheusClient instance
     * @param prometheusConfig - The configuration for the PrometheusClient
     */
    constructor(prometheusConfig?: PrometheusClientConfig);
    client: typeof client;
    private config;
    private prefix;
    gateway: client.Pushgateway<client.RegistryContentType> | undefined;
    private pushInterval;
    /**
     * Initializes the prometheus client, setting up the pushgateway if enabled
     */
    init(): void;
    /**
     * Pushes metrics to the pushgateway, if enabled
     */
    pushMetrics(): Promise<void>;
    /**
     * Shuts down the prometheus client cleanly
     */
    stop(): void;
    /**
     * Tells prom-client to collect default metrics
     * Only called once on init
     */
    collectDefaultMetrics(): void;
    /**
     * Handles metrics requests to serve the /metrics endpoint
     * @param req - The request object
     * @param res - The response object
     */
    handleMetricsRequest(req: Request, res: Response): Promise<void>;
    /**
     * Returns the metrics from the registry
     */
    getMetrics(): Promise<string>;
    /**
     * Returns the content type for the metrics
     */
    getContentType(): "text/plain; version=0.0.4; charset=utf-8";
}
export {};
